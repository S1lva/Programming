/*Описание предметной области,
по которой должна быть построена объектная модель:

Некоторые читатели сразу скажут, что все это, наверно, выдумки,
 что в жизни таких малышей не бывает. Но никто ведь и не говорит,
  что они в жизни бывают. В жизни -- это одно, а в сказочном
  городе -- совсем другое. В сказочном городе все бывает. В одном
   домике на улице Колокольчиков жило шестнадцать малышей-коротышей.
    Самым главным из них был малыш-коротыш, по имени Знайка. Его
    прозвали Знайкой за то, что он знал очень много. А знал он много
     потому, что читал разные книги. Эти книги лежали у него и на столе,
      и под столом, и на кровати, и под кроватью. В его комнате не было
      такого места, где бы не лежали книги. От чтения книг Знайка сделался
       очень умным. Поэтому все его слушались и очень любили. Одевался он
        всегда в черный костюм, а когда садился за стол, надевал на нос
        очки и начинал читать какую-нибудь книгу, то совсем становился
        похож на профессора.

        SOLID принципы
        --------------------------------------
        Принцип единственной ответственности (SRP)
        никогда не должно быть больше одной причины изменить класс

        Принцип открытости/закрытости (OCP)
        Этот принцип емко описывают так: программные сущности (классы, модули, функции и т.п.)
        должны быть открыты для расширения, но закрыты для изменения.

        Принцип подстановки Барбары Лисков (LSP)
        объекты в программе можно заменить их наследниками без изменения свойств программы.

        Принцип разделения интерфейса (ISP)
        Принцип разделения интерфейсов говорит о том, что слишком «толстые» интерфейсы
        необходимо разделять на более мелкие и специфические, чтобы клиенты мелких
        интерфейсов знали только о методах, необходимых в работе. В итоге, при
        изменении метода интерфейса не должны меняться клиенты, которые этот метод
         не используют.

        Принцип инверсии зависимостей (DIP)
        зависимости внутри системы строятся на основе абстракций. Модули верхнего уровня
        не зависят от модулей нижнего уровня.
        Абстракции не должны зависеть от деталей. Детали должны зависеть от абстракций.
        -------------------------------------
*/
public class lab_3 {
    public static void main(String args[]){
        interface wearBlackSuit{
            void print();
        }

        abstract class Znaika implements wearBlackSuit {
             private String name;
             private String getName() { return name;}
        }

    }
}